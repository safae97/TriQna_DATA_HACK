// lib/services/pdf_report_service.dart
import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';

import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:open_file/open_file.dart';

import '../models/road_issue.dart';
import '../models/authority_model.dart';

class PdfReportService {
  // Generate a PDF report for a list of road issues
  static Future<Uint8List> generateRoadIssuesReport({
    required List<RoadIssue> issues,
    required Authority authority,
    required String areaName,
    required double radiusKm,
  }) async {
    final pdf = pw.Document();

    // Load a font
    final font = await PdfGoogleFonts.nunitoRegular();
    final fontBold = await PdfGoogleFonts.nunitoBold();
    final fontItalic = await PdfGoogleFonts.nunitoItalic();

    // Add a header/title page
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Center(
              child: pw.Column(
                children: [
                  pw.SizedBox(height: 40),
                  pw.Text(
                    'ROAD ISSUES REPORT',
                    style: pw.TextStyle(font: fontBold, fontSize: 24, color: PdfColors.blue900),
                  ),
                  pw.SizedBox(height: 10),
                  pw.Text(
                    'Generated on ${DateFormat('MMMM dd, yyyy').format(DateTime.now())}',
                    style: pw.TextStyle(font: fontItalic, fontSize: 14, color: PdfColors.grey700),
                  ),
                  pw.SizedBox(height: 30),
                  pw.Container(
                    width: 100,
                    height: 2,
                    color: PdfColors.blue900,
                  ),
                  pw.SizedBox(height: 30),
                ],
              ),
            ),

            pw.Text(
              'Authority Information:',
              style: pw.TextStyle(font: fontBold, fontSize: 16, color: PdfColors.blue900),
            ),
            pw.SizedBox(height: 5),
            _buildInfoRow('Jurisdiction:', authority.jurisdiction, font, fontBold),
            _buildInfoRow('Department:', authority.department, font, fontBold),
            _buildInfoRow('Authority ID:', authority.uid, font, fontBold),
            _buildInfoRow('Report Area:', areaName, font, fontBold),
            _buildInfoRow('Radius:', '$radiusKm km', font, fontBold),
            _buildInfoRow('Total Issues:', '${issues.length}', font, fontBold),

            pw.SizedBox(height: 20),

            pw.Text(
              'Summary of Issues:',
              style: pw.TextStyle(font: fontBold, fontSize: 16, color: PdfColors.blue900),
            ),
            pw.SizedBox(height: 5),

            // Issue type summary
            _buildIssueSummary(issues, font, fontBold),

            pw.SizedBox(height: 30),

            pw.Center(
              child: pw.Text(
                'This report contains detailed information about road issues reported in ${areaName}.',
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(font: font, fontSize: 12, color: PdfColors.grey700),
              ),
            ),
          ],
        ),
      ),
    );

    // Add issues detail pages
    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        header: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Row(
              mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
              children: [
                pw.Text(
                  'Road Issues in ${authority.jurisdiction}',
                  style: pw.TextStyle(font: fontBold, fontSize: 14),
                ),
                pw.Text(
                  'Page ${context.pageNumber} of ${context.pagesCount}',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ],
            ),
            pw.Divider(),
          ],
        ),
        footer: (context) => pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.end,
          children: [
            pw.Text(
              'Generated by triQna - ${DateFormat('MM/dd/yyyy').format(DateTime.now())}',
              style: pw.TextStyle(font: font, fontSize: 10, color: PdfColors.grey700),
            ),
          ],
        ),
        build: (context) => [
          pw.Table.fromTextArray(
            headerStyle: pw.TextStyle(font: fontBold, color: PdfColors.white),
            headerDecoration: const pw.BoxDecoration(
              color: PdfColors.blue900,
            ),
            cellStyle: pw.TextStyle(font: font),
            cellHeight: 40,
            cellAlignments: {
              0: pw.Alignment.centerLeft,
              1: pw.Alignment.centerLeft,
              2: pw.Alignment.center,
              3: pw.Alignment.center,
              4: pw.Alignment.center,
            },
            headerPadding: const pw.EdgeInsets.all(5),
            cellPadding: const pw.EdgeInsets.all(5),
            headers: ['Type', 'Description', 'Verifications', 'Transport', 'Reported Date'],
            data: issues.map((issue) => [
              issue.type,
              issue.description,
              issue.verificationCount.toString(),
              issue.transportMode,
              DateFormat('MM/dd/yyyy').format(issue.timestamp),
            ]).toList(),
          ),

          pw.SizedBox(height: 20),

          // Detailed issue information for most verified issues
          pw.Header(
            level: 1,
            text: 'Highest Priority Issues',
            textStyle: pw.TextStyle(font: fontBold, fontSize: 18, color: PdfColors.blue900),
          ),

          pw.SizedBox(height: 10),

          ...issues
              .where((issue) => issue.verificationCount > 2) // Only high priority issues
              .take(5) // Limit to top 5
              .map((issue) => _buildDetailedIssue(issue, font, fontBold))
              .toList(),
        ],
      ),
    );

    // Map visualization page
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Center(
              child: pw.Text(
                'Issue Locations Map',
                style: pw.TextStyle(font: fontBold, fontSize: 18, color: PdfColors.blue900),
              ),
            ),
            pw.SizedBox(height: 10),
            pw.Center(
              child: pw.Container(
                width: 400,
                height: 400,
                decoration: pw.BoxDecoration(
                  color: PdfColors.grey200,
                  border: pw.Border.all(color: PdfColors.grey400),
                ),
                child: pw.Center(
                  child: pw.Text(
                    'Map visualization is available in the app',
                    style: pw.TextStyle(font: fontItalic, fontSize: 12),
                  ),
                ),
              ),
            ),
            pw.SizedBox(height: 20),
            pw.Text(
              'Issue Coordinates:',
              style: pw.TextStyle(font: fontBold, fontSize: 14),
            ),
            pw.SizedBox(height: 5),

            // Coordinates table
            pw.Table.fromTextArray(
              headerStyle: pw.TextStyle(font: fontBold, color: PdfColors.white),
              headerDecoration: const pw.BoxDecoration(
                color: PdfColors.blue900,
              ),
              cellStyle: pw.TextStyle(font: font),
              cellHeight: 30,
              cellAlignments: {
                0: pw.Alignment.centerLeft,
                1: pw.Alignment.center,
                2: pw.Alignment.center,
              },
              headerPadding: const pw.EdgeInsets.all(5),
              cellPadding: const pw.EdgeInsets.all(5),
              headers: ['Issue Type', 'Latitude', 'Longitude'],
              data: issues.take(10).map((issue) => [
                issue.type,
                issue.latitude.toStringAsFixed(6),
                issue.longitude.toStringAsFixed(6),
              ]).toList(),
            ),
          ],
        ),
      ),
    );

    return pdf.save();
  }

  // Helper widget for info rows in PDF
  static pw.Widget _buildInfoRow(String label, String value, pw.Font font, pw.Font fontBold) {
    return pw.Padding(
      padding: const pw.EdgeInsets.only(bottom: 5),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.SizedBox(
            width: 100,
            child: pw.Text(
              label,
              style: pw.TextStyle(font: fontBold, fontSize: 12),
            ),
          ),
          pw.Expanded(
            child: pw.Text(
              value,
              style: pw.TextStyle(font: font, fontSize: 12),
            ),
          ),
        ],
      ),
    );
  }

  // Build a summary of issues by type
  static pw.Widget _buildIssueSummary(List<RoadIssue> issues, pw.Font font, pw.Font fontBold) {
    // Count issues by type
    final typeCounts = <String, int>{};
    for (final issue in issues) {
      typeCounts[issue.type] = (typeCounts[issue.type] ?? 0) + 1;
    }

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: typeCounts.entries.map((entry) {
        // Calculate percentage
        final percentage = issues.isEmpty ? 0 : (entry.value / issues.length * 100).toStringAsFixed(1);

        return pw.Padding(
          padding: const pw.EdgeInsets.only(bottom: 5),
          child: pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text(
                '${entry.key}: ${entry.value} (${percentage}%)',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
              pw.SizedBox(height: 3),
              pw.Container(
                height: 10,
                child: pw.Row(
                  children: [
                    pw.Container(
                      width: issues.isEmpty ? 0 : (entry.value / issues.length * 200),
                      color: PdfColors.blue700,
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 5),
            ],
          ),
        );
      }).toList(),
    );
  }

  // Build a detailed issue block
  static pw.Widget _buildDetailedIssue(RoadIssue issue, pw.Font font, pw.Font fontBold) {
    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 15),
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(5)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                issue.type,
                style: pw.TextStyle(font: fontBold, fontSize: 14, color: PdfColors.blue900),
              ),
              pw.Text(
                'Verifications: ${issue.verificationCount}',
                style: pw.TextStyle(font: fontBold, fontSize: 12, color: PdfColors.red),
              ),
            ],
          ),
          pw.Divider(),
          _buildInfoRow('Description:', issue.description, font, fontBold),
          _buildInfoRow('Transport Mode:', issue.transportMode, font, fontBold),
          _buildInfoRow('Reported On:', DateFormat('MM/dd/yyyy HH:mm').format(issue.timestamp), font, fontBold),
          _buildInfoRow('Coordinates:', '(${issue.latitude.toStringAsFixed(6)}, ${issue.longitude.toStringAsFixed(6)})', font, fontBold),
          _buildInfoRow('Reporter ID:', issue.userId, font, fontBold),
        ],
      ),
    );
  }

  // Save the PDF file and open it
  static Future<void> savePdfFile(Uint8List bytes, String fileName) async {
    final dir = await getApplicationDocumentsDirectory();
    final file = File('${dir.path}/$fileName');
    await file.writeAsBytes(bytes);

    await OpenFile.open(file.path);
  }

  // Share the PDF file
  static Future<void> sharePdf(Uint8List bytes, String fileName) async {
    await Printing.sharePdf(bytes: bytes, filename: fileName);
  }

  // Preview the PDF
  static Future<void> previewPdf(Uint8List bytes) async {
    await Printing.layoutPdf(
      onLayout: (PdfPageFormat format) async => bytes,
    );
  }
}